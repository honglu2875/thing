// Copyright 2023 Honglu Fan (https://github.com/honglu2875).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
package thing;

enum DTYPE {
  INT8 = 0;  // np.int8, torch.int8
  INT16 = 1;  // np.int16, torch.int16
  INT32 = 2;  // np.int32, torch.int32
  INT64 = 3;  // np.int64, torch.int64
  UINT8 = 4;  // np.uint8, torch.uint8
  UINT16 = 5;  // np.uint16
  UINT32 = 6;  // np.uint32
  UINT64 = 7;  // np.uint64
  FLOAT16 = 8;  // np.float16, torch.float16
  BFLOAT16 = 9;  // torch.bfloat16
  FLOAT32 = 10;  // np.float32, torch.float32
  FLOAT64 = 11;  // np.float64, torch.float64
  BOOL = 12;  // built-in bool, torch.bool
}

enum FRAMEWORK {
  NUMPY = 0;
  TORCH = 1;
  JAX = 2;
}

enum STATUS {
    SUCCESS = 0;
    FAILURE = 1;
}

enum NODE_TYPE {
  LIST = 0;
  TUPLE = 1;
  DICT = 2;
  TENSOR = 3; // A leaf node
  STRING = 4; // A leaf node
  NONE = 5; // A leaf node
}

message Array {
  // Send a serialized array of bytes
  int64 id = 1;  // Unique identifier of this array
  repeated int64 shape = 2;
  optional string var_name = 3;  // Variable name
  DTYPE dtype = 4;
  FRAMEWORK framework = 5;
  bytes data = 6;
  optional uint32 chunk_id = 7;  // If sending in chunks, the chunk_id goes as 0, 1, 2, ...
  optional uint32 num_chunks = 8;  // Total number of chunks. Included when > 1.
}

message String {
  // Send a string
  int64 id = 1;  // Unique identifier of this array
  optional string var_name = 2;  // Variable name
  string data = 3;
}

message PyTreeNode {
  // A PyTree object where:
  // - leaves are either arrays or strings
  // - nodes are lists, tuples or dicts
  int64 id = 1;  // Unique id
  optional string var_name = 2;  // Variable name
  optional NODE_TYPE node_type = 3;  // "list", "tuple", "dict", "tensor", "string" or None
  repeated PyTreeNode children = 4;
  optional string key = 5;  // Only if **the previous level** is a dict

  // Below are fields to identify the objects
  optional int64 object_id = 6;  // For leaves to identify their exact object id
  // To reduce overheads, we sometimes directly carry small objects
  optional String string = 7;
  optional Array array = 8;
}

message Byte {
  // Send byte information without metadata
  // (Currently only for debugging. Maybe use it to allow for pickled objects in the future.)
  bytes data = 1;
}

message HealthCheckRequest {
}

message Response {
  STATUS status = 1;
}

service Thing {
  rpc CatchArray (Array) returns (Response);
  rpc CatchString (String) returns (Response);
  rpc CatchByte (Byte) returns (Response);
  rpc CatchPyTree (PyTreeNode) returns (Response);
  rpc HealthCheck (HealthCheckRequest) returns (Response);
}
